# Note this function is generic and doesn't look for more intelligent "blank" values like "no record",
#   "not available", etc.
is_blank <- function(x) {
classof_x <- class(x)
result <-
!is.na(x) &
(((classof_x == "character") & (x == "")) |
((classof_x %in% c("integer", "numeric")) & (x == 0)))
return(result)
}
# Function to format percentages (only when value exists)
format_percent <- function(x) {
result <- formatC(x * 100, digits = 0, width = 5, format = "d", zero.print = FALSE)
if (x != 0) result <- paste(result, "%", sep = "")
return(result)
}
# Function to not output NaNs from third-party functions in lapply() below
nan_replace_0 <- function(x) {
if (is.nan(x)) result <- 0 else result = x
return(result)
}
# Generate a summary (cursory) view of base dataset for initial understanding and pre-processing direction
rowcount <- nrow(train_df)
ua <- do.call(rbind, lapply(train_df, function(x) c(
colnames(x),
class(x),
format_percent(sum(is.na(x)) / rowcount),
format_percent(sum(is_blank(x)) / rowcount),
formatC(length(unique(na.omit(x))),
digits = 0, width = 7, format = "d", big.mark = ",", zero.print = FALSE),
formatC(ifelse(is.numeric(x), min(na.omit(x)), 0),
digits = ifelse(is.double(x), 3, 0), width = 7, format = "f", big.mark = ",", zero.print = FALSE),
formatC(ifelse(is.numeric(x), max(na.omit(x)), 0),
digits = ifelse(is.double(x), 3, 0), width = 7, format = "f", big.mark = ",", zero.print = FALSE),
formatC(ifelse(is.double(x), mean(na.omit(x)), 0),
digits = 3, width = 7, format = "f", big.mark = ",", zero.print = FALSE),
formatC(ifelse(is.numeric(x), median(na.omit(x)), 0),
digits = ifelse(is.double(x), 3, 0), width = 7, format = "f", big.mark = ",", zero.print = FALSE),
format(ifelse(is.numeric(x),
ifelse(na.omit(x) < (quantile(na.omit(x), 0.25) - (1.5 * IQR(na.omit(x)))), "Yes", "No"), ""),
justify = "centre", width = 8, format = "s"),
format(ifelse(is.numeric(x),
ifelse(na.omit(x) > (quantile(na.omit(x), 0.75) - (1.5 * IQR(na.omit(x)))), "Yes", "No"), ""),
justify = "centre", width = 8, format = "s"),
formatC(ifelse(is.numeric(x), nan_replace_0(skewness(na.omit(x))), 0),
digits = 3, width = 8, format = "f", zero.print = FALSE),
formatC(ifelse(is.numeric(x), nan_replace_0(kurtosis(na.omit(x))), 0),
digits = 3, width = 8, format = "f", zero.print = FALSE))))
colnames(ua) <- c(
"Type",
format("NA", justify = "right", width = 6),
format("Blank", justify = "right", width = 6),
format("Unique", justify = "right", width = 7),
format("Min", justify = "right", width = 7),
format("Max", justify = "right", width = 7),
format("Mean", justify = "right", width = 7),
format("Median", justify = "right", width = 7),
format("Outlier<", justify = "centre", width = 8),
format(">Outlier", justify = "centre", width = 8),
format("Kurtosis", justify = "right", width = 8),
format("Skewness", justify = "right", width = 8))
row.names(ua) <- lapply(row.names(ua),
function(x) if (nchar(x) > 20) return(paste(substr(x, 1, 17), "...", sep = ""))
else return(x))
{ cat(
"Summary Univariate Analysis (",
formatC(rowcount, big.mark = ","), " observations)\n",
sep = "")
print(noquote(ua))
}
sum(is.na(gd_df$Patient.Age))
any(gd_df$Patient.Age < 0)
any(gd_df$Patient.Age == 0)
unique(gd_df$Inherited.from.father)
unique(gd_df$Maternal.gene)
gd_df[ , c(ncol(gd_df), 1:(ncol(gd_df) - 1))]
gd_df <- gd_df[ , c(ncol(gd_df), 1:(ncol(gd_df) - 1))]
str(gd_df)
unique(gd_df$Inherited.from.father)
unique(gd_df$Maternal.gene)
unique(status)
cat(unique(gd_df$Inherited.from.father))
unique(gd_df$Status)
unique(gd_df$Respiratory.Rate..breaths.min.)
mode(gd_df$Respiratory.Rate..breaths.min.)
unique(gd_df$Heart.Rate..rates.min)
unique(gd_df$Test.1)
unique(gd_df$Test.2)
unique(gd_df$Test.3)
unique(gd_df$Test.4)
unique(gd_df$Test.5)
unique(gd_df$Parental.consent)
unique(gd_df$Parental.consent)
unique(gd_df$Follow.up)
unique(gd_df$Gender)
cols_tofill <- c("Inherited.from.father",
"Maternal.gene",
"Respiratory.Rate..breaths.min.",
"Heart.Rate..rates.min",
"Parental.consent",
"Follow.up",
"Gender")
train_df[cols_tofill]
train_df[cols_tofill][train_df[cols_tofill] == ""]
unique(gd_df$Birth.asphyxia)
unique(gd_df$Autopsy.shows.birth.defect..if.applicable.)
unique(gd_df$Place.of.birth)
unique(gd_df$Place.of.birth)
gd_df <- read.csv("../data/train_genetic_disorders.csv", header = TRUE)
unique(gd_df$Place.of.birth)
unique(gd_df$Folic.acid.details..peri.conceptional.)
unique(gd_df$H.O.serious.maternal.illness)
unique(gd_df$H.O.radiation.exposure..x.ray.)
unique(gd_df$H.O.substance.abuse)
unique(gd_df$Assisted.conception.IVF.ART)
unique(gd_df$History.of.anomalies.in.previous.pregnancies)
unique(gd_df$No..of.previous.abortion)
unique(gd_df$Birth.defects)
unique(gd_df$White.Blood.cell.count..thousand.per.microliter.)
unique(Blood.test.result)
unique(gd_df$Blood.test.result)
unique(gd_df$Symptom.1)
which(gd_df["Mother.s.age"])
gd_df$Disorder.Subclass[gd_df$Genetic.Disorder == ""]
unique(gd_df$Disorder.Subclass[gd_df$Genetic.Disorder == ""])
# Load R libraries
library(caret)
library(e1071)
# Expand output width and minimize exp notation
options(width = 150)
options(scipen = 100)
options(digits = 1)
# Set style defaults
knitr::opts_chunk$set(class.source = "source")
knitr::opts_chunk$set(class.output = "output")
knitr::opts_chunk$set(fig.width = 5, fig.height = (5 * .7), fig.align = "center")
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(comment = NA)
# Load dataset(s)
gd_df <- read.csv("../data/train_genetic_disorders.csv", header = TRUE)
# Data validation and understanding, including structure, content, and statistical characteristics covered below
###### Data Structure Review
```{r data_structure}
# Summarize base dataset and [optionally] sample rows
str(gd_df)
#head(gd_df, 3)
###### Preliminary Feature Reduction (clearly n/a to Objective and Hypothesis)
```{r prelim_feature_reduction}
# Define n/a columns and subset dataframe; Note retaining "some" informational variables like "Institute.Name" for
#   possible descriptive analytic purposes
drop_cols <- c("Patient.First.Name",
"Family.Name",
"Father.s.name",
"Institute.Name",
"Location.of.Institute")
gd_df <- gd_df[ , !(names(gd_df) %in% drop_cols)]
# Define n/a columns and subset dataframe; Note retaining "some" informational variables like "Institute.Name" for
#   possible descriptive analytic purposes
drop_cols <- c("Patient.First.Name",
"Family.Name",
"Father.s.name",
"Institute.Name",
"Location.of.Institute")
gd_df <- gd_df[ , !(names(gd_df) %in% drop_cols)]
###### Class Target and Label Review
```{r class_target_label_review}
# Check for missing labels; set aside where missing
missing_target <- which(is.na(gd_df$Disorder.Subclass) | (gd_df$Disorder.Subclass == ""))
cat("Rows pre-subset for missing labels: ", format(nrow(gd_df), format = "d", big.mark = ","), sep = "")
gd_hold_df <- gd_df[missing_target, ]
gd_df <- gd_df[-missing_target, ]
cat("Held rows with missing labels: ", format(nrow(gd_hold_df), format = "d", big.mark = ","), sep = "")
cat("Net rows (labeled): ", format(nrow(gd_df), format = "d", big.mark = ","), sep = "")
# Show frequency distribution for [prospective] target class(es)
show_frequency <- function(desc, c) {
t <- as.data.frame(prop.table(table(c)))
colnames(t) <- c("Class", "Frequency")
cat(desc, "\n"); print(t[order(-t$Freq, t$Class), 1:2], row.names = FALSE)
}
show_frequency("Pre-Split Frequency Distribution", gd_df$Disorder.Subclass)
# Move the target class to "top" of dataframe so column removals don't impact
gd_df <- gd_df[ , c(ncol(gd_df), 1:(ncol(gd_df) - 1))]
target_col = 1
# Move the target class to "top" of dataframe so column removals don't impact
gd_df <- gd_df[ , c(ncol(gd_df), 1:(ncol(gd_df) - 1))]
target_col = 1
### Data Splitting
```{r data_splitting}
# Split data 80/20 train/test, using caret's inherent stratified split to compensate for class imbalance
set.seed(1)
train_rows <- createDataPartition(gd_df$Disorder.Subclass, times = 1, p = 0.80, list = FALSE)
train_df <- gd_df[train_rows, ]
test_df <- gd_df[-train_rows, ]
show_frequency("Post-Split Frequency Distribution (Train)", train_df$Disorder.Subclass)
# Split data 80/20 train/test, using caret's inherent stratified split to compensate for class imbalance
set.seed(1)
train_rows <- createDataPartition(gd_df$Disorder.Subclass, times = 1, p = 0.80, list = FALSE)
train_df <- gd_df[train_rows, ]
test_df <- gd_df[-train_rows, ]
show_frequency("Post-Split Frequency Distribution (Train)", train_df$Disorder.Subclass)
### Data Cleaning (and reduction)
###### Data (Sample) Characteristic Review for Pre-Processing
(Suppressing custom code for simplicity)
```{r data_univariate, echo = FALSE}
# Note this function is generic and doesn't look for more intelligent "blank" values like "no record",
#   "not available", etc.
is_blank <- function(x) {
classof_x <- class(x)
result <-
!is.na(x) &
(((classof_x == "character") & (x == "")) |
((classof_x %in% c("integer", "numeric")) & (x == 0)))
return(result)
}
# Function to format percentages (only when value exists)
format_percent <- function(x) {
result <- formatC(x * 100, digits = 0, width = 5, format = "d", zero.print = FALSE)
if (x != 0) result <- paste(result, "%", sep = "")
return(result)
}
# Function to Generate a summary of base dataset
univariate <- function(df) {
rowcount <- nrow(df)
ua <- do.call(rbind, lapply(df, function(x) c(
colnames(x),
class(x),
format_percent(sum(is.na(x)) / rowcount),
format_percent(sum(is_blank(x)) / rowcount),
formatC(length(unique(na.omit(x))),
digits = 0, width = 7, format = "d", big.mark = ",", zero.print = FALSE),
formatC(ifelse(is.numeric(x), min(na.omit(x)), 0),
digits = ifelse(is.double(x), 3, 0), width = 7, format = "f", big.mark = ",", zero.print = FALSE),
formatC(ifelse(is.numeric(x), max(na.omit(x)), 0),
digits = ifelse(is.double(x), 3, 0), width = 7, format = "f", big.mark = ",", zero.print = FALSE),
formatC(ifelse(is.double(x), mean(na.omit(x)), 0),
digits = 3, width = 7, format = "f", big.mark = ",", zero.print = FALSE),
formatC(ifelse(is.numeric(x), median(na.omit(x)), 0),
digits = ifelse(is.double(x), 3, 0), width = 7, format = "f", big.mark = ",", zero.print = FALSE),
format(ifelse(is.numeric(x),
ifelse(na.omit(x) < (quantile(na.omit(x), 0.25) - (1.5 * IQR(na.omit(x)))), "Yes", "No"), ""),
justify = "centre", width = 8, format = "s"),
format(ifelse(is.numeric(x),
ifelse(na.omit(x) > (quantile(na.omit(x), 0.75) - (1.5 * IQR(na.omit(x)))), "Yes", "No"), ""),
justify = "centre", width = 8, format = "s"),
formatC(ifelse(is.numeric(x), nan_replace_0(skewness(na.omit(x))), 0),
digits = 3, width = 8, format = "f", zero.print = FALSE),
formatC(ifelse(is.numeric(x), nan_replace_0(kurtosis(na.omit(x))), 0),
digits = 3, width = 8, format = "f", zero.print = FALSE))))
colnames(ua) <- c(
"Type",
format("NA", justify = "right", width = 6),
format("BlankZ", justify = "right", width = 6),
format("Unique", justify = "right", width = 7),
format("Min", justify = "right", width = 7),
format("Max", justify = "right", width = 7),
format("Mean", justify = "right", width = 7),
format("Median", justify = "right", width = 7),
format("Outlier<", justify = "centre", width = 8),
format(">Outlier", justify = "centre", width = 8),
format("Kurtosis", justify = "right", width = 8),
format("Skewness", justify = "right", width = 8))
row.names(ua) <- lapply(row.names(ua),
function(x) if (nchar(x) > 20) return(paste(substr(x, 1, 17), "...", sep = ""))
else return(x))
{ cat(
"Summary Univariate Analysis (",
formatC(rowcount, big.mark = ","), " observations)\n",
sep = "")
print(noquote(ua))
}
}
###### Missing Values
unique(train_df$Disorder.Subclass[train_df$Genetic.Disorder == ""])
cols = c("Disorder.Subclass", "Genetic.Disorder")
train_df[cols]
unique(train_df[cols])
train_df[cols]
cols = c("Disorder.Subclass", "Genetic.Disorder")
library(dplyr)
train_df %>% group_by(Disorder.Subclass, Genetic.Disorder)
train_df[cols] %>% group_by(Disorder.Subclass, Genetic.Disorder)
train_df[cols] %>% group_by(Disorder.Subclass, Genetic.Disorder) %>% arrange(Disorder.Subclass, Genetic.Disorder)
unique(train_df$Disorder.Subclass, train_df$Genetic.Disorder)
unique(train_df[cols])
z <- unique(train_df[cols])
z
print(z, row_numbers = fALSE)
print(z, row.names = fALSE)
z
z[ , 1]
z[1 , 1]
z[1 , ]
z[1 , order("Disorder.Subclass", "Genetic.Disorder")]
z[ , order("Disorder.Subclass", "Genetic.Disorder")]
z[order("Disorder.Subclass", "Genetic.Disorder") , ]
zz[order("Disorder.Subclass", "Genetic.Disorder") , ]
z
zz[order(z$Disorder.Subclass, z$Genetic.Disorder) , ]
z[order(z$Disorder.Subclass, z$Genetic.Disorder) , ]
z <- unique(train_df[cols][train_df[cols] != ""])
z
z[order(z$Disorder.Subclass, z$Genetic.Disorder) , ]
z
str(z)
z <- as.data.frame(unique(train_df[cols][train_df[cols] != ""]))
z[order(z$Disorder.Subclass, z$Genetic.Disorder) , ]
z
z <- as.data.frame(unique(train_df[cols][train_df$Genetic.Disorder != ""]))
z <- as.data.frame(unique(train_df[cols][train_df$Genetic.Disorder != ""]))
z <- unique(train_df[cols][train_df$Genetic.Disorder != ""])
z <- as.data.frame(unique(train_df[cols][train_df[cols] != ""]))
z
z <- as.data.frame(unique(train_df[cols]))
z
z <- as.data.frame(unique(train_df[cols]))
train_df[cols][train_df[cols] != ""]
unique(train_df[cols][train_df[cols] != ""])
as.data.frame(unique(train_df[cols][train_df[cols] != ""]))
train_df %>% left_join(train_df, by = "Disorder.Subclass")
train_df %>% left_join(train_df, by = "Disorder.Subclass") select(Disorder.Subclass, Genetic.Disorder)
train_df %>% left_join(train_df, by = "Disorder.Subclass") %>% select(Disorder.Subclass, Genetic.Disorder)
unique(train_df[cols][train_df[cols] != ""])
z <- as.data.frame(unique(train_df[cols]))
z
z <- z[-which(z$Genetic.Disorder == ""), ]
z
z <- z[order(z$Genetic.Disorder), ]
z
z <- z[order(z$Disorder.Subclass, z$Genetic.Disorder), ]
z
merge(train_df, z, by = "Disorder.Subclass")
merge(train_df, z, by = "Disorder.Subclass")[1]
merge(train_df, z, by = "Disorder.Subclass")
merge(train_df, z, by = "Disorder.Subclass")$Disorder.Subclass
merge(train_df, z, by = "Disorder.Subclass")$Genetic.Disorder
merge(train_df, z, by = "Disorder.Subclass")[2]
xyz <- merge(train_df, z, by = "Disorder.Subclass")
str(xyz)
merge(train_df, z, by = "Disorder.Subclass")$Genetic.Disorder.x
merge(train_df, z, by = "Disorder.Subclass")$Genetic.Disorder.y
unique(merge(train_df, z, by = "Disorder.Subclass")$Genetic.Disorder.y)
unique(merge(train_df, z, by = "Disorder.Subclass")$Genetic.Disorder.x)
train_df$Genetic.Disorder[train_df$Genetic.Disorder == ""] <- merge(train_df, z, by = "Disorder.Subclass")$Genetic.Disorder.y
train_df$Genetic.Disorder[train_df$Genetic.Disorder == ""] <- merge(train_df[train_df$Genetic.Disorder == ""], z, by = "Disorder.Subclass")$Genetic.Disorder.y
merge(train_df, z, by = "Disorder.Subclass")$Genetic.Disorder.y
unique(merge(train_df, z, by = "Disorder.Subclass")$Genetic.Disorder.y)
unique(merge(train_df, z, by = "Disorder.Subclass")$Genetic.Disorder.x)
unique(merge(train_df, z, by = "Disorder.Subclass")$Genetic.Disorder)
unique(merge(train_df, z, by = "Disorder.Subclass")$Genetic.Disorder.y)
unique(merge(train_df[train_df$Genetic.Disorder == ""], z, by = "Disorder.Subclass")$Genetic.Disorder.y)
unique(merge(train_df[train_df$Genetic.Disorder == ""]], z, by = "Disorder.Subclass")$Genetic.Disorder.y)
unique(merge(train_df[train_df$Genetic.Disorder == ""], z, by = "Disorder.Subclass")$Genetic.Disorder.y)
train_df[train_df$Genetic.Disorder == ""]
train_df[train_df$Genetic.Disorder == ""][ , ]
train_df[ , train_df$Genetic.Disorder == ""]
train_df[train_df$Genetic.Disorder == "", ]
z <- as.data.frame(unique(train_df[cols]))
z <- z[-which(z$Genetic.Disorder == ""), ]
z <- z[order(z$Disorder.Subclass, z$Genetic.Disorder), ]
z
z
set.seed(1)
train_rows <- createDataPartition(gd_df$Disorder.Subclass, times = 1, p = 0.80, list = FALSE)
train_df <- gd_df[train_rows, ]
test_df <- gd_df[-train_rows, ]
show_frequency("Post-Split Frequency Distribution (Train)", train_df$Disorder.Subclass)
z <- as.data.frame(unique(train_df[cols]))
z <- z[-which(z$Genetic.Disorder == ""), ]
z <- z[order(z$Disorder.Subclass, z$Genetic.Disorder), ]
z
unique(merge(train_df[train_df$Genetic.Disorder == ""], z, by = "Disorder.Subclass")$Genetic.Disorder.y)
unique(merge(train_df, z, by = "Disorder.Subclass")$Genetic.Disorder.y)
unique(merge(train_df[train_df$Genetic.Disorder == ""], z, by = "Disorder.Subclass")$Genetic.Disorder.y)
train_df[train_df$Genetic.Disorder == ""]
train_df[train_df$Genetic.Disorder == ""][ , ]
train_df[ , ][train_df$Genetic.Disorder == ""]
train_df[train_df$Genetic.Disorder == "", ]
merge(train_df[train_df$Genetic.Disorder == "", ], z, by = "Disorder.Subclass")
xyz <- merge(train_df[train_df$Genetic.Disorder == "", ], z, by = "Disorder.Subclass")
str(xyz)
merge(train_df[train_df$Genetic.Disorder == "", ], z, by = "Disorder.Subclass")$Genetic.Disorder.y
unique(merge(train_df[train_df$Genetic.Disorder == "", ], z, by = "Disorder.Subclass")$Genetic.Disorder.y)
unique(merge(train_df[train_df$Genetic.Disorder == "", ], z, by = "Disorder.Subclass")$Genetic.Disorder.x)
train_df[train_df$Genetic.Disorder == "", ] <- merge(train_df[train_df$Genetic.Disorder == "", ], z, by = "Disorder.Subclass")$Genetic.Disorder.y
train_df
unique(gd_df$Test.1)
unique(gd_df$Test.2)
unique(gd_df$Test.3)
unique(gd_df$Test.4)
unique(gd_df$Test.5)
unique(gd_df$Symptom.1)
unique(gd_df$Symptom.2)
unique(gd_df$Symptom.3)
unique(gd_df$Symptom.4)
unique(gd_df$Symptom.5)
unique(gd_df$Symptom.6)
unique(gd_df$Respiratory.Rate..breaths.min.)
zcols = c("Patient.Age", "Mother.s.age", "Father.s.age")
median(train_df[zcols])
lapply(train_df[zcols], function(x) median(x))
zcols
apply(train_df[zcols], 2, median)
apply(train_df$Patient.Age, 2, median)
apply(train_df, 2, median)
apply(is.na(train_df), 2, median)
median(train_df$Patient.Age)
median(train_df$Patient.Age, rm.na = TRUE)
median(train_df$Patient.Age, na.rm = TRUE)
apply(train_df[zcols], 2, function(x) median(x, na.rm = TRUE))
apply(train_df$Father.s.age, 2, function(x) median(x, na.rm = TRUE))
apply(train_df, 2, function(x) median(x, na.rm = TRUE))
median(train_df$Father.s.age, na.rm = TRUE)
typeof(train_df$Father.s.age)
apply(train_df[zcols], 2, function(x) median(x, na.rm = TRUE))
gd_df
str(gd_df)
zcols
median(gd_df[zcols], na.rm = TRUE)
median(gd_df[zcols, ], na.rm = TRUE)
median(gd_df[, zcols], na.rm = TRUE)
median(gd_df)
median(gd_df$Patient.Age)
str(gd_df)
median(as.numeric(gd_df$Patient.Age))
median(as.numeric(gd_df$Patient.Age), na.rm = TRUE)
median(gd_df$Patient.Age, na.rm = TRUE)
median(gd_df$Mother.s.age, na.rm = TRUE)
median(gd_df$Father.s.age, na.rm = TRUE)
median(gd_df[zcols], na.rm = TRUE)
apply(gd_df$Patient.Age, 2, median)
median(gd_df$Father.s.age, na.rm = TRUE)
lapply(gd_df[zcols], function(x) median(x, na.rm = TRUE))
xyz <- lapply(gd_df[zcols], function(x) median(x, na.rm = TRUE))
str(xyz)
xyz <- apply(gd_df[zcols], 2, function(x) median(x, na.rm = TRUE))
str(xyz)
str
xyz[zcols]
z <- gd_df
z[zcols] <- apply(z[zcols], 2, function(x) median(x, na.rm = TRUE))
z[zcols] <- median(z[zcols], na.rm = TRUE)
median(z[zcols], na.rm = TRUE)
apply(gd_df[zcols], 2, function(x) median(x, na.rm = TRUE))
apply(gd_df[zcols], 2, function(x) median(x, na.rm = TRUE))[1]
apply(gd_df[zcols], 2, function(x) median(x, na.rm = TRUE))[2]
apply(gd_df[zcols], 2, function(x) median(x, na.rm = TRUE))[3]
apply(gd_df[zcols], 2, function(x) median(x, na.rm = TRUE))[zcols]
apply(train_df[zcols], 2, function(x) median(x, na.rm = TRUE))[zcols]
apply(gd_df[zcols], 2, function(x) median(x, na.rm = TRUE))[zcols]
apply(gd_df[zcols], 2, function(x) median(x, na.rm = TRUE))
z <- apply(gd_df[zcols], 2, function(x) median(x, na.rm = TRUE))
z
apply(gd_df, 2, median)
apply(gd_df[zcols], 2, median)
apply(gd_df[zcols][!is.na(gd_df[zcols])], 2, median)
apply(gd_df[zcols], 2, function(x) median(x, na.rm = TRUE))
apply(gd_df[zcols, ], 2, function(x) median(x, na.rm = TRUE))
apply(gd_df[ , zcols], 2, function(x) median(x, na.rm = TRUE))
apply(gd_df[ , zcols], 2, function(x) median(x, na.rm = TRUE))
median(gd_df[zcols], na.rm = TRUE)
median(gd_df[zcols], na.rm =  = TRUE)
median(gd_df[zcols], na.rm = TRUE)
apply(gd_df[ , zcols], 2, function(x) median(x, na.rm = TRUE))
lapply(gd_df[ , zcols], function(x) median(x, na.rm = TRUE))
as.data.frame(lapply(gd_df[ , zcols], function(x) median(x, na.rm = TRUE)))
apply(gd_df[ , zcols], 2, function(x) median(x, na.rm = TRUE))
xyz <- apply(gd_df[ , zcols], 2, function(x) median(x, na.rm = TRUE))
str(xyz)
xyz <- as.data.frame(apply(gd_df[ , zcols], 2, function(x) median(x, na.rm = TRUE)))
str(xyz)
xyz <- apply(gd_df[ , zcols], 2, function(x) median(x, na.rm = TRUE))
str(xyz)
xyz <- sapply(gd_df[ , zcols], 2, function(x) median(x, na.rm = TRUE))
xyz <- sapply(gd_df[ , zcols], function(x) median(x, na.rm = TRUE))
xyz
str(xyz)
xyz <- as.data.frame(sapply(gd_df[ , zcols], function(x) median(x, na.rm = TRUE)))
str(xyz)
f <- function(x) {
x[is.na(x)] <- median(x, na.rm = TRUE)
}
data.frame(apply(gd_df, 2, f))
f <- function(x) {
x[is.na(x)] <- median(x, na.rm = TRUE)
}
data.frame(apply(gd_df[zcols], 2, f))
f <- function(x) {
x[is.na(x)] <- median(x, na.rm = TRUE)
}
apply(gd_df[zcols], 2, f)
gd_df["Patient.Age"]
gd_df[is.na("Patient.Age")]
is.na(gd_df["Patient.Age"])
gd_df["Patient.Age"][is.na(gd_df["Patient.Age"])]
x <- 1
typeof(x) <- "integer"
mode(gd_df$Maternal.gene)
mode([gd_df$Maternal.gene])
mode(gd_df$Maternal.gene)
cmode <- function(x) {
uniqx <- unique(na.omit(x))
uniqx[which.max(tabulate(match(x, uniqx)))]
}
cmode(gd_df$Maternal.gene)
cmode <- function(x) {
uniqx <- unique(na.omit(x))
uniqx[which.max(tabulate(match(x, uniqx)))]
}
cmode(gd_df$Gender)
unique(gd_df$No..of.previous.abortion)
median(gd_df$No..of.previous.abortion, na.rm = TRUE)
